#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: tkg-aws-default
  namespace: #@ data.values.NAMESPACE
  annotations:
    run.tanzu.vmware.com/resolve-tkr: ""
    identifier.cc.vmware.com: tanzu-aws-default-0.0.1
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: tkg-aws-kcp
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        name: tkg-aws-controlplane-template
  workers:
    machineDeployments:
    - class: tkg-worker
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: tkg-aws-bootstrap-template
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: AWSMachineTemplate
            name: tkg-aws-worker-template
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AWSClusterTemplate
      name: aws-cluster-template
  variables:
  - name: region
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.AWS_REGION:
        default: #@ data.values.AWS_REGION
        #@ end
  - name: sshKeyName
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.AWS_SSH_KEY_NAME:
        default: #@ data.values.AWS_SSH_KEY_NAME
        #@ end
  - name: identityRef
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          kind:
            type: string
            default: AWSClusterRoleIdentity
          name:
            type: string
        #! required:
        #! - name
  - name: bastion
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
        required:
        - enabled
        default:
        #@ if data.values.BASTION_HOST_ENABLED:
          enabled: #@ data.values.BASTION_HOST_ENABLED
        #@ else:
          enabled: true
        #@ end
  - name: loadBalancerSchemeInternal
    required: false
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: cni
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.CNI:
        default: #@ data.values.CNI
        #@ else:
        default: ""
        #@ end
  - name: network
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          vpc:
            type: object
            properties:
              existingID:
                type: string
              cidr:
                type: string
                default: 10.0.0.0/16
                format: cidr
          subnets:
            type: array
            items:
              type: object
              properties:
                az:
                  type: string
                private: &subnet
                  type: object
                  properties:
                    id:
                      type: string
                    cidr:
                      type: string
                      format: cidr
                public: *subnet
          securityGroupOverrides:
            type: object
            properties:
              bastion:
                type: string
              apiServerLB:
                type: string
              lb:
                type: string
              controlplane:
                type: string
              node:
                type: string
          proxy:
            type: object
            properties:
              httpProxy:
                type: string
              httpsProxy:
                type: string
              noProxy:
                type: array
                items:
                  type: string
                default: []
            required:
            - httpProxy
            - httpsProxy
        required:
        - vpc
        - subnets
  - name: controlPlane
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          instanceType:
            type: string
            default: t3.large
          rootVolume:
            type: object
            properties:
              sizeGiB:
                type: integer
                #@ if data.values.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB:
                default: #@ data.values.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB
                #@ else:
                default: 80
                #@ end
  - name: worker
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          instanceType:
            type: string
            default: m5.large
          rootVolume:
            type: object
            properties:
              sizeGiB:
                type: integer
                #@ if data.values.AWS_NODE_OS_DISK_SIZE_GIB:
                default: #@ data.values.AWS_NODE_OS_DISK_SIZE_GIB
                #@ else:
                default: 80
                #@ end
  patches:
  - name: AWSCT_main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/region
        valueFrom:
          variable: region
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/bastion/enabled
        valueFrom:
          variable: bastion.enabled
      - op: add
        path: /spec/template/spec/network/vpc/cidrBlock
        valueFrom:
          variable: network.vpc.cidr
      - op: replace
        path: /spec/template/spec/network/subnets
        valueFrom:
          template: |
            {{ $suffix := list "a" "b" "c" }}
            {{- range $i, $subnet := .network.subnets }}
            - availabilityZone: {{ if $subnet.az }} {{- $subnet.az }} {{- else if $.region }} {{- $.region }} {{- index $suffix $i }} {{- end }}
              cidrBlock: {{ $subnet.private.cidr | default "\"\"" }}
              id: {{ $subnet.private.id | default "\"\"" }}
            {{- if or (empty $.network.vpc.existingID) (not (empty $subnet.public)) }}
            - availabilityZone: {{ if $subnet.az }} {{- $subnet.az }} {{- else if $.region }} {{- $.region }} {{- index $suffix $i }} {{- end }}
              cidrBlock: {{ $subnet.public.cidr | default "\"\"" }}
              isPublic: true
              id: {{ $subnet.public.id | default "\"\"" }}
            {{- end }}
            {{- end }}

  - name: AWSCT_CNIIngressRules_Calico
    enabledIf: '{{ .cni | eq "calico" }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: bgp (calico)
          fromPort: 179
          protocol: tcp
          toPort: 179
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: IP-in-IP (calico)
          fromPort: -1
          protocol: "4"
          toPort: 65535
  - name: AWSCT_CNIIngressRules_Antrea
    enabledIf: '{{ .cni | eq "antrea" }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: antrea1
          fromPort: 10349
          protocol: tcp
          toPort: 10349
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: genev
          fromPort: 6081
          protocol: udp
          toPort: 6081

  - name: AWSCT_VPC_ID
    enabledIf: '{{ not (empty .network.vpc.existingID) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/vpc/id
        valueFrom:
          variable: network.vpc.existingID

  - name: AWSCT_IdentityRef
    enabledIf: '{{ not (empty .identityRef.name) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/identityRef
        valueFrom:
          template: |
            kind: {{ if .identityRef.kind }} {{- .identityRef.kind }} {{- else -}} AWSClusterRoleIdentity {{- end }}
            name: {{ .identityRef.name }}

  - name: AWSCT_ControlPlaneLoadBalancerScheme
    enabledIf: '{{ .loadBalancerSchemeInternal }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneLoadBalancer
        valueFrom:
          template: |
            scheme: internal

  - name: AWSCT_SecurityGroupOverrides
    enabledIf: '{{ any .network.securityGroupOverrides.bastion .network.securityGroupOverrides.controlPlane .network.securityGroupOverrides.apiServerLB .network.securityGroupOverrides.node .network.securityGroupOverrides.lb }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/securityGroupOverrides
        valueFrom:
          template: |
              {{ if .network.securityGroupOverrides.bastion }}  bastion: {{ .network.securityGroupOverrides.bastion }} {{- end }}
              {{ if .network.securityGroupOverrides.controlPlane }}  controlplane: {{ .network.securityGroupOverrides.controlPlane }} {{- end }}
              {{ if .network.securityGroupOverrides.apiServerLB }}  apiserver-lb:  {{ .network.securityGroupOverrides.apiServerLB }} {{- end }}
              {{ if .network.securityGroupOverrides.node }}  node: {{ .network.securityGroupOverrides.node }} {{- end }}
              {{ if .network.securityGroupOverrides.lb }}  lb: {{ .network.securityGroupOverrides.lb }} {{- end }}
  - name: AWS_MT_controlplane
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/instanceType
        valueFrom:
          variable: controlPlane.instanceType
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/rootVolume/size
        valueFrom:
          variable: controlPlane.rootVolume.sizeGiB
      - op: replace
        path: /spec/template/spec/ami/id
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).osImageRef.id }}'
  - name: AWS_MT_worker
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - "tkg-worker"
      jsonPatches:
      - op: replace
        path: /spec/template/spec/instanceType
        valueFrom:
          variable: worker.instanceType
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/rootVolume/size
        valueFrom:
          variable: worker.rootVolume.sizeGiB
      - op: replace
        path: /spec/template/spec/ami/id
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.machineDeployment.version).osImageRef.id }}'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSClusterTemplate
metadata:
  name: aws-cluster-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      region: "${AWS_REGION}"
      sshKeyName: "${AWS_SSH_KEY_NAME}"
      bastion:
        enabled: true
      network:
        vpc:
          cidrBlock:
        subnets:
        - availabilityZone: '${AWS_NODE_AZ}'
          cidrBlock: '${AWS_PRIVATE_NODE_CIDR}'
          id: '${AWS_PRIVATE_SUBNET_ID}'
        cni:
          cniIngressRules:
          - description: kapp-controller
            fromPort: 10100
            protocol: tcp
            toPort: 10100
          - description: addons-manager
            fromPort: 9865
            protocol: tcp
            toPort: 9865
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: tkg-aws-kcp
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      kubeadmConfigSpec:
        files: []
        preKubeadmCommands:
        #! Ensure a non-empty preKubeadmCommands array is present to facilitate patching
        - echo "running preKubeadmCommands…"
        useExperimentalRetryJoin: true
        clusterConfiguration:
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraVolumes: []
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384
          controllerManager:
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          dns:
            imageRepository: dummy.registry.vmware.com
            imageTag: 1.8.4_dummy.5
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: dummy.registry.vmware.com
              imageTag: 1.8.4_dummy.5
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          imageRepository: dummy.registry.vmware.com
          scheduler:
            extraArgs:
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
---
kind: AWSMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
metadata:
  name: tkg-aws-controlplane-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      instanceType: "${CONTROL_PLANE_MACHINE_TYPE}"
      iamInstanceProfile: "control-plane.tkg.cloud.vmware.com"
      sshKeyName: ${AWS_SSH_KEY_NAME}
      ami:
        id: "${AWS_AMI_ID}"
      rootVolume:
        size: 80
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: tkg-aws-worker-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      instanceType: "${NODE_MACHINE_TYPE}"
      iamInstanceProfile: "nodes.tkg.cloud.vmware.com"
      sshKeyName: "${AWS_SSH_KEY_NAME}"
      ami:
        id: "${AWS_AMI_ID}"
      rootVolume:
        size: 80
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: tkg-aws-bootstrap-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          name: '{{ ds.meta_data.local_hostname }}'
          kubeletExtraArgs:
            cloud-provider: aws
            tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      preKubeadmCommands: []
      files: []
